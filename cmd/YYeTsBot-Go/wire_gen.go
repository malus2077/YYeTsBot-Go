// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"YYeTsBot-Go/internal/biz"
	"YYeTsBot-Go/internal/conf"
	"YYeTsBot-Go/internal/data"
	"YYeTsBot-Go/internal/server"
	"YYeTsBot-Go/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase)
	resourceRepo := data.NewResourceRepo(dataData, logger)
	resourceUsecase := biz.NewResourceUsecase(resourceRepo, logger)
	commentRepo := data.NewCommentRepo(dataData, logger)
	commentUsecase := biz.NewCommentUsecase(commentRepo, logger)
	userRepo := data.NewUserRepo(dataData, logger)
	userUseCase := biz.NewUserUseCase(userRepo, logger)
	resourceService := service.NewResourceService(resourceUsecase, commentUsecase, userUseCase)
	commentService := service.NewCommentService(commentUsecase, userUseCase)
	announcementService := service.NewAnnouncementService()
	metricsService := service.NewMetricsService()
	adsenseService := service.NewAdsenseService()
	doubanRepo := data.NewDoubanRepo(dataData, logger)
	doubanUsecase := biz.NewDoubanUsecase(doubanRepo, resourceRepo, logger)
	doubanService := service.NewDoubanService(doubanUsecase)
	captchaRepo := data.NewCaptchaRepo(dataData, logger)
	captchaUsecase := biz.NewCaptchaUsecase(captchaRepo, logger)
	captchaService := service.NewCaptchaService(captchaUsecase)
	grpcServer := server.NewGRPCServer(confServer, greeterService, resourceService, commentService, announcementService, metricsService, adsenseService, doubanService, captchaService, logger)
	httpServer := server.NewHTTPServer(confServer, greeterService, resourceService, commentService, announcementService, metricsService, adsenseService, doubanService, captchaService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
