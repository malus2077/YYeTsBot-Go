// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: yyets/v1/captcha.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCaptchaGetCaptcha = "/api.yyets.v1.Captcha/GetCaptcha"

type CaptchaHTTPServer interface {
	GetCaptcha(context.Context, *GetCaptchaRequest) (*GetCaptchaReply, error)
}

func RegisterCaptchaHTTPServer(s *http.Server, srv CaptchaHTTPServer) {
	r := s.Route("/")
	r.GET("/api/captcha", _Captcha_GetCaptcha0_HTTP_Handler(srv))
}

func _Captcha_GetCaptcha0_HTTP_Handler(srv CaptchaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCaptchaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCaptchaGetCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCaptcha(ctx, req.(*GetCaptchaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCaptchaReply)
		return ctx.Result(200, reply)
	}
}

type CaptchaHTTPClient interface {
	GetCaptcha(ctx context.Context, req *GetCaptchaRequest, opts ...http.CallOption) (rsp *GetCaptchaReply, err error)
}

type CaptchaHTTPClientImpl struct {
	cc *http.Client
}

func NewCaptchaHTTPClient(client *http.Client) CaptchaHTTPClient {
	return &CaptchaHTTPClientImpl{client}
}

func (c *CaptchaHTTPClientImpl) GetCaptcha(ctx context.Context, in *GetCaptchaRequest, opts ...http.CallOption) (*GetCaptchaReply, error) {
	var out GetCaptchaReply
	pattern := "/api/captcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCaptchaGetCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
