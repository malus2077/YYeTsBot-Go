// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: yyets/v1/captcha.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Captcha_CreateCaptcha_FullMethodName = "/api.yyets.v1.Captcha/CreateCaptcha"
	Captcha_UpdateCaptcha_FullMethodName = "/api.yyets.v1.Captcha/UpdateCaptcha"
	Captcha_DeleteCaptcha_FullMethodName = "/api.yyets.v1.Captcha/DeleteCaptcha"
	Captcha_GetCaptcha_FullMethodName    = "/api.yyets.v1.Captcha/GetCaptcha"
	Captcha_ListCaptcha_FullMethodName   = "/api.yyets.v1.Captcha/ListCaptcha"
)

// CaptchaClient is the client API for Captcha service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaptchaClient interface {
	CreateCaptcha(ctx context.Context, in *CreateCaptchaRequest, opts ...grpc.CallOption) (*CreateCaptchaReply, error)
	UpdateCaptcha(ctx context.Context, in *UpdateCaptchaRequest, opts ...grpc.CallOption) (*UpdateCaptchaReply, error)
	DeleteCaptcha(ctx context.Context, in *DeleteCaptchaRequest, opts ...grpc.CallOption) (*DeleteCaptchaReply, error)
	GetCaptcha(ctx context.Context, in *GetCaptchaRequest, opts ...grpc.CallOption) (*GetCaptchaReply, error)
	ListCaptcha(ctx context.Context, in *ListCaptchaRequest, opts ...grpc.CallOption) (*ListCaptchaReply, error)
}

type captchaClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptchaClient(cc grpc.ClientConnInterface) CaptchaClient {
	return &captchaClient{cc}
}

func (c *captchaClient) CreateCaptcha(ctx context.Context, in *CreateCaptchaRequest, opts ...grpc.CallOption) (*CreateCaptchaReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCaptchaReply)
	err := c.cc.Invoke(ctx, Captcha_CreateCaptcha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captchaClient) UpdateCaptcha(ctx context.Context, in *UpdateCaptchaRequest, opts ...grpc.CallOption) (*UpdateCaptchaReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCaptchaReply)
	err := c.cc.Invoke(ctx, Captcha_UpdateCaptcha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captchaClient) DeleteCaptcha(ctx context.Context, in *DeleteCaptchaRequest, opts ...grpc.CallOption) (*DeleteCaptchaReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCaptchaReply)
	err := c.cc.Invoke(ctx, Captcha_DeleteCaptcha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captchaClient) GetCaptcha(ctx context.Context, in *GetCaptchaRequest, opts ...grpc.CallOption) (*GetCaptchaReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCaptchaReply)
	err := c.cc.Invoke(ctx, Captcha_GetCaptcha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captchaClient) ListCaptcha(ctx context.Context, in *ListCaptchaRequest, opts ...grpc.CallOption) (*ListCaptchaReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCaptchaReply)
	err := c.cc.Invoke(ctx, Captcha_ListCaptcha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptchaServer is the server API for Captcha service.
// All implementations must embed UnimplementedCaptchaServer
// for forward compatibility.
type CaptchaServer interface {
	CreateCaptcha(context.Context, *CreateCaptchaRequest) (*CreateCaptchaReply, error)
	UpdateCaptcha(context.Context, *UpdateCaptchaRequest) (*UpdateCaptchaReply, error)
	DeleteCaptcha(context.Context, *DeleteCaptchaRequest) (*DeleteCaptchaReply, error)
	GetCaptcha(context.Context, *GetCaptchaRequest) (*GetCaptchaReply, error)
	ListCaptcha(context.Context, *ListCaptchaRequest) (*ListCaptchaReply, error)
	mustEmbedUnimplementedCaptchaServer()
}

// UnimplementedCaptchaServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCaptchaServer struct{}

func (UnimplementedCaptchaServer) CreateCaptcha(context.Context, *CreateCaptchaRequest) (*CreateCaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCaptcha not implemented")
}
func (UnimplementedCaptchaServer) UpdateCaptcha(context.Context, *UpdateCaptchaRequest) (*UpdateCaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCaptcha not implemented")
}
func (UnimplementedCaptchaServer) DeleteCaptcha(context.Context, *DeleteCaptchaRequest) (*DeleteCaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCaptcha not implemented")
}
func (UnimplementedCaptchaServer) GetCaptcha(context.Context, *GetCaptchaRequest) (*GetCaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaptcha not implemented")
}
func (UnimplementedCaptchaServer) ListCaptcha(context.Context, *ListCaptchaRequest) (*ListCaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCaptcha not implemented")
}
func (UnimplementedCaptchaServer) mustEmbedUnimplementedCaptchaServer() {}
func (UnimplementedCaptchaServer) testEmbeddedByValue()                 {}

// UnsafeCaptchaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptchaServer will
// result in compilation errors.
type UnsafeCaptchaServer interface {
	mustEmbedUnimplementedCaptchaServer()
}

func RegisterCaptchaServer(s grpc.ServiceRegistrar, srv CaptchaServer) {
	// If the following call pancis, it indicates UnimplementedCaptchaServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Captcha_ServiceDesc, srv)
}

func _Captcha_CreateCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptchaServer).CreateCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Captcha_CreateCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptchaServer).CreateCaptcha(ctx, req.(*CreateCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Captcha_UpdateCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptchaServer).UpdateCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Captcha_UpdateCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptchaServer).UpdateCaptcha(ctx, req.(*UpdateCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Captcha_DeleteCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptchaServer).DeleteCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Captcha_DeleteCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptchaServer).DeleteCaptcha(ctx, req.(*DeleteCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Captcha_GetCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptchaServer).GetCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Captcha_GetCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptchaServer).GetCaptcha(ctx, req.(*GetCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Captcha_ListCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptchaServer).ListCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Captcha_ListCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptchaServer).ListCaptcha(ctx, req.(*ListCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Captcha_ServiceDesc is the grpc.ServiceDesc for Captcha service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Captcha_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.yyets.v1.Captcha",
	HandlerType: (*CaptchaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCaptcha",
			Handler:    _Captcha_CreateCaptcha_Handler,
		},
		{
			MethodName: "UpdateCaptcha",
			Handler:    _Captcha_UpdateCaptcha_Handler,
		},
		{
			MethodName: "DeleteCaptcha",
			Handler:    _Captcha_DeleteCaptcha_Handler,
		},
		{
			MethodName: "GetCaptcha",
			Handler:    _Captcha_GetCaptcha_Handler,
		},
		{
			MethodName: "ListCaptcha",
			Handler:    _Captcha_ListCaptcha_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yyets/v1/captcha.proto",
}
