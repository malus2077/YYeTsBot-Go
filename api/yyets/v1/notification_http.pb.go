// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/yyets/v1/notification.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNotificationGetNotification = "/api.yyets.v1.Notification/GetNotification"

type NotificationHTTPServer interface {
	GetNotification(context.Context, *GetNotificationRequest) (*GetNotificationReply, error)
}

func RegisterNotificationHTTPServer(s *http.Server, srv NotificationHTTPServer) {
	r := s.Route("/")
	r.GET("/api/notification", _Notification_GetNotification0_HTTP_Handler(srv))
}

func _Notification_GetNotification0_HTTP_Handler(srv NotificationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNotificationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationGetNotification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNotification(ctx, req.(*GetNotificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNotificationReply)
		return ctx.Result(200, reply)
	}
}

type NotificationHTTPClient interface {
	GetNotification(ctx context.Context, req *GetNotificationRequest, opts ...http.CallOption) (rsp *GetNotificationReply, err error)
}

type NotificationHTTPClientImpl struct {
	cc *http.Client
}

func NewNotificationHTTPClient(client *http.Client) NotificationHTTPClient {
	return &NotificationHTTPClientImpl{client}
}

func (c *NotificationHTTPClientImpl) GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...http.CallOption) (*GetNotificationReply, error) {
	var out GetNotificationReply
	pattern := "/api/notification"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotificationGetNotification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
