// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: yyets/v1/adsense.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Adsense_CreateAdsense_FullMethodName = "/api.yyets.v1.Adsense/CreateAdsense"
	Adsense_UpdateAdsense_FullMethodName = "/api.yyets.v1.Adsense/UpdateAdsense"
	Adsense_DeleteAdsense_FullMethodName = "/api.yyets.v1.Adsense/DeleteAdsense"
	Adsense_GetAdsense_FullMethodName    = "/api.yyets.v1.Adsense/GetAdsense"
	Adsense_ListAdsense_FullMethodName   = "/api.yyets.v1.Adsense/ListAdsense"
)

// AdsenseClient is the client API for Adsense service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdsenseClient interface {
	CreateAdsense(ctx context.Context, in *CreateAdsenseRequest, opts ...grpc.CallOption) (*CreateAdsenseReply, error)
	UpdateAdsense(ctx context.Context, in *UpdateAdsenseRequest, opts ...grpc.CallOption) (*UpdateAdsenseReply, error)
	DeleteAdsense(ctx context.Context, in *DeleteAdsenseRequest, opts ...grpc.CallOption) (*DeleteAdsenseReply, error)
	GetAdsense(ctx context.Context, in *GetAdsenseRequest, opts ...grpc.CallOption) (*GetAdsenseReply, error)
	ListAdsense(ctx context.Context, in *ListAdsenseRequest, opts ...grpc.CallOption) (*ListAdsenseReply, error)
}

type adsenseClient struct {
	cc grpc.ClientConnInterface
}

func NewAdsenseClient(cc grpc.ClientConnInterface) AdsenseClient {
	return &adsenseClient{cc}
}

func (c *adsenseClient) CreateAdsense(ctx context.Context, in *CreateAdsenseRequest, opts ...grpc.CallOption) (*CreateAdsenseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAdsenseReply)
	err := c.cc.Invoke(ctx, Adsense_CreateAdsense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsenseClient) UpdateAdsense(ctx context.Context, in *UpdateAdsenseRequest, opts ...grpc.CallOption) (*UpdateAdsenseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAdsenseReply)
	err := c.cc.Invoke(ctx, Adsense_UpdateAdsense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsenseClient) DeleteAdsense(ctx context.Context, in *DeleteAdsenseRequest, opts ...grpc.CallOption) (*DeleteAdsenseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAdsenseReply)
	err := c.cc.Invoke(ctx, Adsense_DeleteAdsense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsenseClient) GetAdsense(ctx context.Context, in *GetAdsenseRequest, opts ...grpc.CallOption) (*GetAdsenseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdsenseReply)
	err := c.cc.Invoke(ctx, Adsense_GetAdsense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsenseClient) ListAdsense(ctx context.Context, in *ListAdsenseRequest, opts ...grpc.CallOption) (*ListAdsenseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdsenseReply)
	err := c.cc.Invoke(ctx, Adsense_ListAdsense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdsenseServer is the server API for Adsense service.
// All implementations must embed UnimplementedAdsenseServer
// for forward compatibility.
type AdsenseServer interface {
	CreateAdsense(context.Context, *CreateAdsenseRequest) (*CreateAdsenseReply, error)
	UpdateAdsense(context.Context, *UpdateAdsenseRequest) (*UpdateAdsenseReply, error)
	DeleteAdsense(context.Context, *DeleteAdsenseRequest) (*DeleteAdsenseReply, error)
	GetAdsense(context.Context, *GetAdsenseRequest) (*GetAdsenseReply, error)
	ListAdsense(context.Context, *ListAdsenseRequest) (*ListAdsenseReply, error)
	mustEmbedUnimplementedAdsenseServer()
}

// UnimplementedAdsenseServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdsenseServer struct{}

func (UnimplementedAdsenseServer) CreateAdsense(context.Context, *CreateAdsenseRequest) (*CreateAdsenseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdsense not implemented")
}
func (UnimplementedAdsenseServer) UpdateAdsense(context.Context, *UpdateAdsenseRequest) (*UpdateAdsenseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdsense not implemented")
}
func (UnimplementedAdsenseServer) DeleteAdsense(context.Context, *DeleteAdsenseRequest) (*DeleteAdsenseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdsense not implemented")
}
func (UnimplementedAdsenseServer) GetAdsense(context.Context, *GetAdsenseRequest) (*GetAdsenseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdsense not implemented")
}
func (UnimplementedAdsenseServer) ListAdsense(context.Context, *ListAdsenseRequest) (*ListAdsenseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdsense not implemented")
}
func (UnimplementedAdsenseServer) mustEmbedUnimplementedAdsenseServer() {}
func (UnimplementedAdsenseServer) testEmbeddedByValue()                 {}

// UnsafeAdsenseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdsenseServer will
// result in compilation errors.
type UnsafeAdsenseServer interface {
	mustEmbedUnimplementedAdsenseServer()
}

func RegisterAdsenseServer(s grpc.ServiceRegistrar, srv AdsenseServer) {
	// If the following call pancis, it indicates UnimplementedAdsenseServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Adsense_ServiceDesc, srv)
}

func _Adsense_CreateAdsense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdsenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsenseServer).CreateAdsense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adsense_CreateAdsense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsenseServer).CreateAdsense(ctx, req.(*CreateAdsenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adsense_UpdateAdsense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdsenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsenseServer).UpdateAdsense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adsense_UpdateAdsense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsenseServer).UpdateAdsense(ctx, req.(*UpdateAdsenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adsense_DeleteAdsense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdsenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsenseServer).DeleteAdsense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adsense_DeleteAdsense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsenseServer).DeleteAdsense(ctx, req.(*DeleteAdsenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adsense_GetAdsense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdsenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsenseServer).GetAdsense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adsense_GetAdsense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsenseServer).GetAdsense(ctx, req.(*GetAdsenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adsense_ListAdsense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdsenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsenseServer).ListAdsense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adsense_ListAdsense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsenseServer).ListAdsense(ctx, req.(*ListAdsenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Adsense_ServiceDesc is the grpc.ServiceDesc for Adsense service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Adsense_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.yyets.v1.Adsense",
	HandlerType: (*AdsenseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAdsense",
			Handler:    _Adsense_CreateAdsense_Handler,
		},
		{
			MethodName: "UpdateAdsense",
			Handler:    _Adsense_UpdateAdsense_Handler,
		},
		{
			MethodName: "DeleteAdsense",
			Handler:    _Adsense_DeleteAdsense_Handler,
		},
		{
			MethodName: "GetAdsense",
			Handler:    _Adsense_GetAdsense_Handler,
		},
		{
			MethodName: "ListAdsense",
			Handler:    _Adsense_ListAdsense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yyets/v1/adsense.proto",
}
