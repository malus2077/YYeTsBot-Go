// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: yyets/v1/announcement.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Announcement_CreateAnnouncement_FullMethodName = "/api.yyets.v1.Announcement/CreateAnnouncement"
	Announcement_UpdateAnnouncement_FullMethodName = "/api.yyets.v1.Announcement/UpdateAnnouncement"
	Announcement_DeleteAnnouncement_FullMethodName = "/api.yyets.v1.Announcement/DeleteAnnouncement"
	Announcement_GetAnnouncement_FullMethodName    = "/api.yyets.v1.Announcement/GetAnnouncement"
	Announcement_ListAnnouncement_FullMethodName   = "/api.yyets.v1.Announcement/ListAnnouncement"
)

// AnnouncementClient is the client API for Announcement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnouncementClient interface {
	CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*CreateAnnouncementReply, error)
	UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementRequest, opts ...grpc.CallOption) (*UpdateAnnouncementReply, error)
	DeleteAnnouncement(ctx context.Context, in *DeleteAnnouncementRequest, opts ...grpc.CallOption) (*DeleteAnnouncementReply, error)
	GetAnnouncement(ctx context.Context, in *GetAnnouncementRequest, opts ...grpc.CallOption) (*GetAnnouncementReply, error)
	ListAnnouncement(ctx context.Context, in *ListAnnouncementRequest, opts ...grpc.CallOption) (*ListAnnouncementReply, error)
}

type announcementClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnouncementClient(cc grpc.ClientConnInterface) AnnouncementClient {
	return &announcementClient{cc}
}

func (c *announcementClient) CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*CreateAnnouncementReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAnnouncementReply)
	err := c.cc.Invoke(ctx, Announcement_CreateAnnouncement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementClient) UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementRequest, opts ...grpc.CallOption) (*UpdateAnnouncementReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAnnouncementReply)
	err := c.cc.Invoke(ctx, Announcement_UpdateAnnouncement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementClient) DeleteAnnouncement(ctx context.Context, in *DeleteAnnouncementRequest, opts ...grpc.CallOption) (*DeleteAnnouncementReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAnnouncementReply)
	err := c.cc.Invoke(ctx, Announcement_DeleteAnnouncement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementClient) GetAnnouncement(ctx context.Context, in *GetAnnouncementRequest, opts ...grpc.CallOption) (*GetAnnouncementReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnnouncementReply)
	err := c.cc.Invoke(ctx, Announcement_GetAnnouncement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementClient) ListAnnouncement(ctx context.Context, in *ListAnnouncementRequest, opts ...grpc.CallOption) (*ListAnnouncementReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAnnouncementReply)
	err := c.cc.Invoke(ctx, Announcement_ListAnnouncement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnouncementServer is the server API for Announcement service.
// All implementations must embed UnimplementedAnnouncementServer
// for forward compatibility.
type AnnouncementServer interface {
	CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*CreateAnnouncementReply, error)
	UpdateAnnouncement(context.Context, *UpdateAnnouncementRequest) (*UpdateAnnouncementReply, error)
	DeleteAnnouncement(context.Context, *DeleteAnnouncementRequest) (*DeleteAnnouncementReply, error)
	GetAnnouncement(context.Context, *GetAnnouncementRequest) (*GetAnnouncementReply, error)
	ListAnnouncement(context.Context, *ListAnnouncementRequest) (*ListAnnouncementReply, error)
	mustEmbedUnimplementedAnnouncementServer()
}

// UnimplementedAnnouncementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnnouncementServer struct{}

func (UnimplementedAnnouncementServer) CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*CreateAnnouncementReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnouncement not implemented")
}
func (UnimplementedAnnouncementServer) UpdateAnnouncement(context.Context, *UpdateAnnouncementRequest) (*UpdateAnnouncementReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnnouncement not implemented")
}
func (UnimplementedAnnouncementServer) DeleteAnnouncement(context.Context, *DeleteAnnouncementRequest) (*DeleteAnnouncementReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnouncement not implemented")
}
func (UnimplementedAnnouncementServer) GetAnnouncement(context.Context, *GetAnnouncementRequest) (*GetAnnouncementReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncement not implemented")
}
func (UnimplementedAnnouncementServer) ListAnnouncement(context.Context, *ListAnnouncementRequest) (*ListAnnouncementReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnnouncement not implemented")
}
func (UnimplementedAnnouncementServer) mustEmbedUnimplementedAnnouncementServer() {}
func (UnimplementedAnnouncementServer) testEmbeddedByValue()                      {}

// UnsafeAnnouncementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnouncementServer will
// result in compilation errors.
type UnsafeAnnouncementServer interface {
	mustEmbedUnimplementedAnnouncementServer()
}

func RegisterAnnouncementServer(s grpc.ServiceRegistrar, srv AnnouncementServer) {
	// If the following call pancis, it indicates UnimplementedAnnouncementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Announcement_ServiceDesc, srv)
}

func _Announcement_CreateAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServer).CreateAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Announcement_CreateAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServer).CreateAnnouncement(ctx, req.(*CreateAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Announcement_UpdateAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServer).UpdateAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Announcement_UpdateAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServer).UpdateAnnouncement(ctx, req.(*UpdateAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Announcement_DeleteAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServer).DeleteAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Announcement_DeleteAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServer).DeleteAnnouncement(ctx, req.(*DeleteAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Announcement_GetAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServer).GetAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Announcement_GetAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServer).GetAnnouncement(ctx, req.(*GetAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Announcement_ListAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServer).ListAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Announcement_ListAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServer).ListAnnouncement(ctx, req.(*ListAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Announcement_ServiceDesc is the grpc.ServiceDesc for Announcement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Announcement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.yyets.v1.Announcement",
	HandlerType: (*AnnouncementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnnouncement",
			Handler:    _Announcement_CreateAnnouncement_Handler,
		},
		{
			MethodName: "UpdateAnnouncement",
			Handler:    _Announcement_UpdateAnnouncement_Handler,
		},
		{
			MethodName: "DeleteAnnouncement",
			Handler:    _Announcement_DeleteAnnouncement_Handler,
		},
		{
			MethodName: "GetAnnouncement",
			Handler:    _Announcement_GetAnnouncement_Handler,
		},
		{
			MethodName: "ListAnnouncement",
			Handler:    _Announcement_ListAnnouncement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yyets/v1/announcement.proto",
}
