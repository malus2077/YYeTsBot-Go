// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/yyets/v1/resource.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ResourceDataInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResourceDataInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDataInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDataInfoMultiError, or nil if none found.
func (m *ResourceDataInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDataInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Cnname

	// no validation rules for Enname

	// no validation rules for Aliasname

	// no validation rules for Channel

	// no validation rules for ChannelCn

	// no validation rules for Area

	// no validation rules for ShowType

	// no validation rules for Expire

	// no validation rules for Views

	if len(errors) > 0 {
		return ResourceDataInfoMultiError(errors)
	}

	return nil
}

// ResourceDataInfoMultiError is an error wrapping multiple validation errors
// returned by ResourceDataInfo.ValidateAll() if the designated constraints
// aren't met.
type ResourceDataInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDataInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDataInfoMultiError) AllErrors() []error { return m }

// ResourceDataInfoValidationError is the validation error returned by
// ResourceDataInfo.Validate if the designated constraints aren't met.
type ResourceDataInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDataInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDataInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDataInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDataInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDataInfoValidationError) ErrorName() string { return "ResourceDataInfoValidationError" }

// Error satisfies the builtin error interface
func (e ResourceDataInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDataInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDataInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDataInfoValidationError{}

// Validate checks the field values on ResourceData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourceData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceDataMultiError, or
// nil if none found.
func (m *ResourceData) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceDataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceDataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceDataValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceDataMultiError(errors)
	}

	return nil
}

// ResourceDataMultiError is an error wrapping multiple validation errors
// returned by ResourceData.ValidateAll() if the designated constraints aren't met.
type ResourceDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDataMultiError) AllErrors() []error { return m }

// ResourceDataValidationError is the validation error returned by
// ResourceData.Validate if the designated constraints aren't met.
type ResourceDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDataValidationError) ErrorName() string { return "ResourceDataValidationError" }

// Error satisfies the builtin error interface
func (e ResourceDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDataValidationError{}

// Validate checks the field values on ResourceItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourceItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceItemMultiError, or
// nil if none found.
func (m *ResourceItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceItemValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceItemValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceItemValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceItemMultiError(errors)
	}

	return nil
}

// ResourceItemMultiError is an error wrapping multiple validation errors
// returned by ResourceItem.ValidateAll() if the designated constraints aren't met.
type ResourceItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceItemMultiError) AllErrors() []error { return m }

// ResourceItemValidationError is the validation error returned by
// ResourceItem.Validate if the designated constraints aren't met.
type ResourceItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceItemValidationError) ErrorName() string { return "ResourceItemValidationError" }

// Error satisfies the builtin error interface
func (e ResourceItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceItemValidationError{}

// Validate checks the field values on ResourceClass with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourceClass) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceClass with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceClassMultiError, or
// nil if none found.
func (m *ResourceClass) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceClass) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ALL

	// no validation rules for JP

	// no validation rules for US

	// no validation rules for UK

	// no validation rules for KR

	if len(errors) > 0 {
		return ResourceClassMultiError(errors)
	}

	return nil
}

// ResourceClassMultiError is an error wrapping multiple validation errors
// returned by ResourceClass.ValidateAll() if the designated constraints
// aren't met.
type ResourceClassMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceClassMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceClassMultiError) AllErrors() []error { return m }

// ResourceClassValidationError is the validation error returned by
// ResourceClass.Validate if the designated constraints aren't met.
type ResourceClassValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceClassValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceClassValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceClassValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceClassValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceClassValidationError) ErrorName() string { return "ResourceClassValidationError" }

// Error satisfies the builtin error interface
func (e ResourceClassValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceClass.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceClassValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceClassValidationError{}

// Validate checks the field values on TopResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TopResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TopResourceRequestMultiError, or nil if none found.
func (m *TopResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TopResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TopResourceRequestMultiError(errors)
	}

	return nil
}

// TopResourceRequestMultiError is an error wrapping multiple validation errors
// returned by TopResourceRequest.ValidateAll() if the designated constraints
// aren't met.
type TopResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopResourceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopResourceRequestMultiError) AllErrors() []error { return m }

// TopResourceRequestValidationError is the validation error returned by
// TopResourceRequest.Validate if the designated constraints aren't met.
type TopResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopResourceRequestValidationError) ErrorName() string {
	return "TopResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TopResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopResourceRequestValidationError{}

// Validate checks the field values on TopResourceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TopResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TopResourceReplyMultiError, or nil if none found.
func (m *TopResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TopResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetALL() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TopResourceReplyValidationError{
						field:  fmt.Sprintf("ALL[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TopResourceReplyValidationError{
						field:  fmt.Sprintf("ALL[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TopResourceReplyValidationError{
					field:  fmt.Sprintf("ALL[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUS() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TopResourceReplyValidationError{
						field:  fmt.Sprintf("US[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TopResourceReplyValidationError{
						field:  fmt.Sprintf("US[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TopResourceReplyValidationError{
					field:  fmt.Sprintf("US[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetJP() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TopResourceReplyValidationError{
						field:  fmt.Sprintf("JP[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TopResourceReplyValidationError{
						field:  fmt.Sprintf("JP[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TopResourceReplyValidationError{
					field:  fmt.Sprintf("JP[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetKR() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TopResourceReplyValidationError{
						field:  fmt.Sprintf("KR[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TopResourceReplyValidationError{
						field:  fmt.Sprintf("KR[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TopResourceReplyValidationError{
					field:  fmt.Sprintf("KR[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUK() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TopResourceReplyValidationError{
						field:  fmt.Sprintf("UK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TopResourceReplyValidationError{
						field:  fmt.Sprintf("UK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TopResourceReplyValidationError{
					field:  fmt.Sprintf("UK[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetClass()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TopResourceReplyValidationError{
					field:  "Class",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TopResourceReplyValidationError{
					field:  "Class",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClass()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TopResourceReplyValidationError{
				field:  "Class",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TopResourceReplyMultiError(errors)
	}

	return nil
}

// TopResourceReplyMultiError is an error wrapping multiple validation errors
// returned by TopResourceReply.ValidateAll() if the designated constraints
// aren't met.
type TopResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopResourceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopResourceReplyMultiError) AllErrors() []error { return m }

// TopResourceReplyValidationError is the validation error returned by
// TopResourceReply.Validate if the designated constraints aren't met.
type TopResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopResourceReplyValidationError) ErrorName() string { return "TopResourceReplyValidationError" }

// Error satisfies the builtin error interface
func (e TopResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopResourceReplyValidationError{}

// Validate checks the field values on CreateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateResourceRequestMultiError, or nil if none found.
func (m *CreateResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateResourceRequestMultiError(errors)
	}

	return nil
}

// CreateResourceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResourceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResourceRequestMultiError) AllErrors() []error { return m }

// CreateResourceRequestValidationError is the validation error returned by
// CreateResourceRequest.Validate if the designated constraints aren't met.
type CreateResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResourceRequestValidationError) ErrorName() string {
	return "CreateResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResourceRequestValidationError{}

// Validate checks the field values on CreateResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateResourceReplyMultiError, or nil if none found.
func (m *CreateResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateResourceReplyMultiError(errors)
	}

	return nil
}

// CreateResourceReplyMultiError is an error wrapping multiple validation
// errors returned by CreateResourceReply.ValidateAll() if the designated
// constraints aren't met.
type CreateResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResourceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResourceReplyMultiError) AllErrors() []error { return m }

// CreateResourceReplyValidationError is the validation error returned by
// CreateResourceReply.Validate if the designated constraints aren't met.
type CreateResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResourceReplyValidationError) ErrorName() string {
	return "CreateResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResourceReplyValidationError{}

// Validate checks the field values on UpdateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateResourceRequestMultiError, or nil if none found.
func (m *UpdateResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateResourceRequestMultiError(errors)
	}

	return nil
}

// UpdateResourceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceRequestMultiError) AllErrors() []error { return m }

// UpdateResourceRequestValidationError is the validation error returned by
// UpdateResourceRequest.Validate if the designated constraints aren't met.
type UpdateResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceRequestValidationError) ErrorName() string {
	return "UpdateResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceRequestValidationError{}

// Validate checks the field values on UpdateResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateResourceReplyMultiError, or nil if none found.
func (m *UpdateResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateResourceReplyMultiError(errors)
	}

	return nil
}

// UpdateResourceReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateResourceReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceReplyMultiError) AllErrors() []error { return m }

// UpdateResourceReplyValidationError is the validation error returned by
// UpdateResourceReply.Validate if the designated constraints aren't met.
type UpdateResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceReplyValidationError) ErrorName() string {
	return "UpdateResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceReplyValidationError{}

// Validate checks the field values on DeleteResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteResourceRequestMultiError, or nil if none found.
func (m *DeleteResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResourceRequestMultiError(errors)
	}

	return nil
}

// DeleteResourceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceRequestMultiError) AllErrors() []error { return m }

// DeleteResourceRequestValidationError is the validation error returned by
// DeleteResourceRequest.Validate if the designated constraints aren't met.
type DeleteResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceRequestValidationError) ErrorName() string {
	return "DeleteResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceRequestValidationError{}

// Validate checks the field values on DeleteResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteResourceReplyMultiError, or nil if none found.
func (m *DeleteResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResourceReplyMultiError(errors)
	}

	return nil
}

// DeleteResourceReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteResourceReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceReplyMultiError) AllErrors() []error { return m }

// DeleteResourceReplyValidationError is the validation error returned by
// DeleteResourceReply.Validate if the designated constraints aren't met.
type DeleteResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceReplyValidationError) ErrorName() string {
	return "DeleteResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceReplyValidationError{}

// Validate checks the field values on GetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceRequestMultiError, or nil if none found.
func (m *GetResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetResourceRequestMultiError(errors)
	}

	return nil
}

// GetResourceRequestMultiError is an error wrapping multiple validation errors
// returned by GetResourceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceRequestMultiError) AllErrors() []error { return m }

// GetResourceRequestValidationError is the validation error returned by
// GetResourceRequest.Validate if the designated constraints aren't met.
type GetResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceRequestValidationError) ErrorName() string {
	return "GetResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceRequestValidationError{}

// Validate checks the field values on GetResourceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceReplyMultiError, or nil if none found.
func (m *GetResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetResourceReplyMultiError(errors)
	}

	return nil
}

// GetResourceReplyMultiError is an error wrapping multiple validation errors
// returned by GetResourceReply.ValidateAll() if the designated constraints
// aren't met.
type GetResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceReplyMultiError) AllErrors() []error { return m }

// GetResourceReplyValidationError is the validation error returned by
// GetResourceReply.Validate if the designated constraints aren't met.
type GetResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceReplyValidationError) ErrorName() string { return "GetResourceReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceReplyValidationError{}

// Validate checks the field values on ListResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListResourceRequestMultiError, or nil if none found.
func (m *ListResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListResourceRequestMultiError(errors)
	}

	return nil
}

// ListResourceRequestMultiError is an error wrapping multiple validation
// errors returned by ListResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type ListResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResourceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResourceRequestMultiError) AllErrors() []error { return m }

// ListResourceRequestValidationError is the validation error returned by
// ListResourceRequest.Validate if the designated constraints aren't met.
type ListResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourceRequestValidationError) ErrorName() string {
	return "ListResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourceRequestValidationError{}

// Validate checks the field values on ListResourceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListResourceReplyMultiError, or nil if none found.
func (m *ListResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListResourceReplyMultiError(errors)
	}

	return nil
}

// ListResourceReplyMultiError is an error wrapping multiple validation errors
// returned by ListResourceReply.ValidateAll() if the designated constraints
// aren't met.
type ListResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResourceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResourceReplyMultiError) AllErrors() []error { return m }

// ListResourceReplyValidationError is the validation error returned by
// ListResourceReply.Validate if the designated constraints aren't met.
type ListResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourceReplyValidationError) ErrorName() string {
	return "ListResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourceReplyValidationError{}

// Validate checks the field values on SearchResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchResourceRequestMultiError, or nil if none found.
func (m *SearchResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	// no validation rules for Type

	if len(errors) > 0 {
		return SearchResourceRequestMultiError(errors)
	}

	return nil
}

// SearchResourceRequestMultiError is an error wrapping multiple validation
// errors returned by SearchResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResourceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResourceRequestMultiError) AllErrors() []error { return m }

// SearchResourceRequestValidationError is the validation error returned by
// SearchResourceRequest.Validate if the designated constraints aren't met.
type SearchResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResourceRequestValidationError) ErrorName() string {
	return "SearchResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResourceRequestValidationError{}

// Validate checks the field values on SearchResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchResourceReplyMultiError, or nil if none found.
func (m *SearchResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResource() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResourceReplyValidationError{
						field:  fmt.Sprintf("Resource[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResourceReplyValidationError{
						field:  fmt.Sprintf("Resource[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResourceReplyValidationError{
					field:  fmt.Sprintf("Resource[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetComment() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResourceReplyValidationError{
						field:  fmt.Sprintf("Comment[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResourceReplyValidationError{
						field:  fmt.Sprintf("Comment[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResourceReplyValidationError{
					field:  fmt.Sprintf("Comment[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchResourceReplyMultiError(errors)
	}

	return nil
}

// SearchResourceReplyMultiError is an error wrapping multiple validation
// errors returned by SearchResourceReply.ValidateAll() if the designated
// constraints aren't met.
type SearchResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResourceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResourceReplyMultiError) AllErrors() []error { return m }

// SearchResourceReplyValidationError is the validation error returned by
// SearchResourceReply.Validate if the designated constraints aren't met.
type SearchResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResourceReplyValidationError) ErrorName() string {
	return "SearchResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SearchResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResourceReplyValidationError{}

// Validate checks the field values on SearchComment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchComment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchComment with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchCommentMultiError, or
// nil if none found.
func (m *SearchComment) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchComment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Date

	// no validation rules for Comment

	// no validation rules for CommentID

	// no validation rules for ResourceID

	// no validation rules for ResourceName

	// no validation rules for Origin

	// no validation rules for HasAvatar

	// no validation rules for Hash

	if len(errors) > 0 {
		return SearchCommentMultiError(errors)
	}

	return nil
}

// SearchCommentMultiError is an error wrapping multiple validation errors
// returned by SearchComment.ValidateAll() if the designated constraints
// aren't met.
type SearchCommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchCommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchCommentMultiError) AllErrors() []error { return m }

// SearchCommentValidationError is the validation error returned by
// SearchComment.Validate if the designated constraints aren't met.
type SearchCommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchCommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchCommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchCommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchCommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchCommentValidationError) ErrorName() string { return "SearchCommentValidationError" }

// Error satisfies the builtin error interface
func (e SearchCommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchCommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchCommentValidationError{}
