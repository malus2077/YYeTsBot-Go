// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: yyets/v1/douban.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDoubanGetDouban = "/api.yyets.v1.Douban/GetDouban"

type DoubanHTTPServer interface {
	GetDouban(context.Context, *GetDoubanRequest) (*GetDoubanReply, error)
}

func RegisterDoubanHTTPServer(s *http.Server, srv DoubanHTTPServer) {
	r := s.Route("/")
	r.GET("/api/douban", _Douban_GetDouban0_HTTP_Handler(srv))
}

func _Douban_GetDouban0_HTTP_Handler(srv DoubanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDoubanRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDoubanGetDouban)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDouban(ctx, req.(*GetDoubanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDoubanReply)
		return ctx.Result(200, reply)
	}
}

type DoubanHTTPClient interface {
	GetDouban(ctx context.Context, req *GetDoubanRequest, opts ...http.CallOption) (rsp *GetDoubanReply, err error)
}

type DoubanHTTPClientImpl struct {
	cc *http.Client
}

func NewDoubanHTTPClient(client *http.Client) DoubanHTTPClient {
	return &DoubanHTTPClientImpl{client}
}

func (c *DoubanHTTPClientImpl) GetDouban(ctx context.Context, in *GetDoubanRequest, opts ...http.CallOption) (*GetDoubanReply, error) {
	var out GetDoubanReply
	pattern := "/api/douban"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDoubanGetDouban))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
