// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/yyets/v1/comment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentRequestMultiError, or nil if none found.
func (m *CreateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() <= 0 {
		err := CreateCommentRequestValidationError{
			field:  "ResourceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) != 4 {
		err := CreateCommentRequestValidationError{
			field:  "Captcha",
			reason: "value length must be 4 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetId()) > 32 {
		err := CreateCommentRequestValidationError{
			field:  "Id",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 1 || l > 120 {
		err := CreateCommentRequestValidationError{
			field:  "Content",
			reason: "value length must be between 1 and 120 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CommentId

	if len(errors) > 0 {
		return CreateCommentRequestMultiError(errors)
	}

	return nil
}

// CreateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentRequestMultiError) AllErrors() []error { return m }

// CreateCommentRequestValidationError is the validation error returned by
// CreateCommentRequest.Validate if the designated constraints aren't met.
type CreateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentRequestValidationError) ErrorName() string {
	return "CreateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentRequestValidationError{}

// Validate checks the field values on CreateCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentReplyMultiError, or nil if none found.
func (m *CreateCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for StatusCode

	if len(errors) > 0 {
		return CreateCommentReplyMultiError(errors)
	}

	return nil
}

// CreateCommentReplyMultiError is an error wrapping multiple validation errors
// returned by CreateCommentReply.ValidateAll() if the designated constraints
// aren't met.
type CreateCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentReplyMultiError) AllErrors() []error { return m }

// CreateCommentReplyValidationError is the validation error returned by
// CreateCommentReply.Validate if the designated constraints aren't met.
type CreateCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentReplyValidationError) ErrorName() string {
	return "CreateCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentReplyValidationError{}

// Validate checks the field values on UpdateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentRequestMultiError, or nil if none found.
func (m *UpdateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCommentRequestMultiError(errors)
	}

	return nil
}

// UpdateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentRequestMultiError) AllErrors() []error { return m }

// UpdateCommentRequestValidationError is the validation error returned by
// UpdateCommentRequest.Validate if the designated constraints aren't met.
type UpdateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentRequestValidationError) ErrorName() string {
	return "UpdateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentRequestValidationError{}

// Validate checks the field values on UpdateCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentReplyMultiError, or nil if none found.
func (m *UpdateCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCommentReplyMultiError(errors)
	}

	return nil
}

// UpdateCommentReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateCommentReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentReplyMultiError) AllErrors() []error { return m }

// UpdateCommentReplyValidationError is the validation error returned by
// UpdateCommentReply.Validate if the designated constraints aren't met.
type UpdateCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentReplyValidationError) ErrorName() string {
	return "UpdateCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentReplyValidationError{}

// Validate checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentRequestMultiError, or nil if none found.
func (m *DeleteCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentRequestMultiError) AllErrors() []error { return m }

// DeleteCommentRequestValidationError is the validation error returned by
// DeleteCommentRequest.Validate if the designated constraints aren't met.
type DeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentRequestValidationError) ErrorName() string {
	return "DeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentRequestValidationError{}

// Validate checks the field values on DeleteCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentReplyMultiError, or nil if none found.
func (m *DeleteCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCommentReplyMultiError(errors)
	}

	return nil
}

// DeleteCommentReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteCommentReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentReplyMultiError) AllErrors() []error { return m }

// DeleteCommentReplyValidationError is the validation error returned by
// DeleteCommentReply.Validate if the designated constraints aren't met.
type DeleteCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentReplyValidationError) ErrorName() string {
	return "DeleteCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentReplyValidationError{}

// Validate checks the field values on GetCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRequestMultiError, or nil if none found.
func (m *GetCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCommentRequestMultiError(errors)
	}

	return nil
}

// GetCommentRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRequestMultiError) AllErrors() []error { return m }

// GetCommentRequestValidationError is the validation error returned by
// GetCommentRequest.Validate if the designated constraints aren't met.
type GetCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRequestValidationError) ErrorName() string {
	return "GetCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRequestValidationError{}

// Validate checks the field values on GetCommentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentReplyMultiError, or nil if none found.
func (m *GetCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCommentReplyMultiError(errors)
	}

	return nil
}

// GetCommentReplyMultiError is an error wrapping multiple validation errors
// returned by GetCommentReply.ValidateAll() if the designated constraints
// aren't met.
type GetCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentReplyMultiError) AllErrors() []error { return m }

// GetCommentReplyValidationError is the validation error returned by
// GetCommentReply.Validate if the designated constraints aren't met.
type GetCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentReplyValidationError) ErrorName() string { return "GetCommentReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentReplyValidationError{}

// Validate checks the field values on ListCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentRequestMultiError, or nil if none found.
func (m *ListCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() <= 0 {
		err := ListCommentRequestValidationError{
			field:  "ResourceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSize(); val <= 0 || val > 120 {
		err := ListCommentRequestValidationError{
			field:  "Size",
			reason: "value must be inside range (0, 120]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := ListCommentRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ListCommentRequest_Sort_InLookup[m.GetSort()]; !ok {
		err := ListCommentRequestValidationError{
			field:  "Sort",
			reason: "value must be in list [newest oldest]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCommentRequestMultiError(errors)
	}

	return nil
}

// ListCommentRequestMultiError is an error wrapping multiple validation errors
// returned by ListCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentRequestMultiError) AllErrors() []error { return m }

// ListCommentRequestValidationError is the validation error returned by
// ListCommentRequest.Validate if the designated constraints aren't met.
type ListCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentRequestValidationError) ErrorName() string {
	return "ListCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentRequestValidationError{}

var _ListCommentRequest_Sort_InLookup = map[string]struct{}{
	"newest": {},
	"oldest": {},
}

// Validate checks the field values on ListCommentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentReplyMultiError, or nil if none found.
func (m *ListCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommentReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommentReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return ListCommentReplyMultiError(errors)
	}

	return nil
}

// ListCommentReplyMultiError is an error wrapping multiple validation errors
// returned by ListCommentReply.ValidateAll() if the designated constraints
// aren't met.
type ListCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentReplyMultiError) AllErrors() []error { return m }

// ListCommentReplyValidationError is the validation error returned by
// ListCommentReply.Validate if the designated constraints aren't met.
type ListCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentReplyValidationError) ErrorName() string { return "ListCommentReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentReplyValidationError{}

// Validate checks the field values on ListLatestCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLatestCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLatestCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLatestCommentRequestMultiError, or nil if none found.
func (m *ListLatestCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLatestCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetSize(); val <= 0 || val > 120 {
		err := ListLatestCommentRequestValidationError{
			field:  "Size",
			reason: "value must be inside range (0, 120]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListLatestCommentRequestMultiError(errors)
	}

	return nil
}

// ListLatestCommentRequestMultiError is an error wrapping multiple validation
// errors returned by ListLatestCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLatestCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLatestCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLatestCommentRequestMultiError) AllErrors() []error { return m }

// ListLatestCommentRequestValidationError is the validation error returned by
// ListLatestCommentRequest.Validate if the designated constraints aren't met.
type ListLatestCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLatestCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLatestCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLatestCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLatestCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLatestCommentRequestValidationError) ErrorName() string {
	return "ListLatestCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLatestCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLatestCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLatestCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLatestCommentRequestValidationError{}

// Validate checks the field values on ListLatestCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLatestCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLatestCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLatestCommentReplyMultiError, or nil if none found.
func (m *ListLatestCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLatestCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLatestCommentReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLatestCommentReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLatestCommentReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLatestCommentReplyMultiError(errors)
	}

	return nil
}

// ListLatestCommentReplyMultiError is an error wrapping multiple validation
// errors returned by ListLatestCommentReply.ValidateAll() if the designated
// constraints aren't met.
type ListLatestCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLatestCommentReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLatestCommentReplyMultiError) AllErrors() []error { return m }

// ListLatestCommentReplyValidationError is the validation error returned by
// ListLatestCommentReply.Validate if the designated constraints aren't met.
type ListLatestCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLatestCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLatestCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLatestCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLatestCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLatestCommentReplyValidationError) ErrorName() string {
	return "ListLatestCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListLatestCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLatestCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLatestCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLatestCommentReplyValidationError{}

// Validate checks the field values on CommentItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentItemMultiError, or
// nil if none found.
func (m *CommentItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Date

	// no validation rules for Browser

	// no validation rules for Content

	// no validation rules for ResourceId

	// no validation rules for Type

	// no validation rules for Id

	// no validation rules for HasAvatar

	// no validation rules for Cnname

	if len(errors) > 0 {
		return CommentItemMultiError(errors)
	}

	return nil
}

// CommentItemMultiError is an error wrapping multiple validation errors
// returned by CommentItem.ValidateAll() if the designated constraints aren't met.
type CommentItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentItemMultiError) AllErrors() []error { return m }

// CommentItemValidationError is the validation error returned by
// CommentItem.Validate if the designated constraints aren't met.
type CommentItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentItemValidationError) ErrorName() string { return "CommentItemValidationError" }

// Error satisfies the builtin error interface
func (e CommentItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentItemValidationError{}
