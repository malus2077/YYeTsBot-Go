// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: yyets/v1/metrics.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMetricsCreateMetrics = "/api.yyets.v1.Metrics/CreateMetrics"

type MetricsHTTPServer interface {
	CreateMetrics(context.Context, *CreateMetricsRequest) (*CreateMetricsReply, error)
}

func RegisterMetricsHTTPServer(s *http.Server, srv MetricsHTTPServer) {
	r := s.Route("/")
	r.POST("/api/metrics", _Metrics_CreateMetrics0_HTTP_Handler(srv))
}

func _Metrics_CreateMetrics0_HTTP_Handler(srv MetricsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMetricsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMetricsCreateMetrics)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMetrics(ctx, req.(*CreateMetricsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMetricsReply)
		return ctx.Result(200, reply)
	}
}

type MetricsHTTPClient interface {
	CreateMetrics(ctx context.Context, req *CreateMetricsRequest, opts ...http.CallOption) (rsp *CreateMetricsReply, err error)
}

type MetricsHTTPClientImpl struct {
	cc *http.Client
}

func NewMetricsHTTPClient(client *http.Client) MetricsHTTPClient {
	return &MetricsHTTPClientImpl{client}
}

func (c *MetricsHTTPClientImpl) CreateMetrics(ctx context.Context, in *CreateMetricsRequest, opts ...http.CallOption) (*CreateMetricsReply, error) {
	var out CreateMetricsReply
	pattern := "/api/metrics"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMetricsCreateMetrics))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
