// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: yyets/v1/douban.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Douban_CreateDouban_FullMethodName = "/api.yyets.v1.Douban/CreateDouban"
	Douban_UpdateDouban_FullMethodName = "/api.yyets.v1.Douban/UpdateDouban"
	Douban_DeleteDouban_FullMethodName = "/api.yyets.v1.Douban/DeleteDouban"
	Douban_GetDouban_FullMethodName    = "/api.yyets.v1.Douban/GetDouban"
	Douban_ListDouban_FullMethodName   = "/api.yyets.v1.Douban/ListDouban"
)

// DoubanClient is the client API for Douban service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoubanClient interface {
	CreateDouban(ctx context.Context, in *CreateDoubanRequest, opts ...grpc.CallOption) (*CreateDoubanReply, error)
	UpdateDouban(ctx context.Context, in *UpdateDoubanRequest, opts ...grpc.CallOption) (*UpdateDoubanReply, error)
	DeleteDouban(ctx context.Context, in *DeleteDoubanRequest, opts ...grpc.CallOption) (*DeleteDoubanReply, error)
	GetDouban(ctx context.Context, in *GetDoubanRequest, opts ...grpc.CallOption) (*GetDoubanReply, error)
	ListDouban(ctx context.Context, in *ListDoubanRequest, opts ...grpc.CallOption) (*ListDoubanReply, error)
}

type doubanClient struct {
	cc grpc.ClientConnInterface
}

func NewDoubanClient(cc grpc.ClientConnInterface) DoubanClient {
	return &doubanClient{cc}
}

func (c *doubanClient) CreateDouban(ctx context.Context, in *CreateDoubanRequest, opts ...grpc.CallOption) (*CreateDoubanReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDoubanReply)
	err := c.cc.Invoke(ctx, Douban_CreateDouban_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doubanClient) UpdateDouban(ctx context.Context, in *UpdateDoubanRequest, opts ...grpc.CallOption) (*UpdateDoubanReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDoubanReply)
	err := c.cc.Invoke(ctx, Douban_UpdateDouban_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doubanClient) DeleteDouban(ctx context.Context, in *DeleteDoubanRequest, opts ...grpc.CallOption) (*DeleteDoubanReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDoubanReply)
	err := c.cc.Invoke(ctx, Douban_DeleteDouban_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doubanClient) GetDouban(ctx context.Context, in *GetDoubanRequest, opts ...grpc.CallOption) (*GetDoubanReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDoubanReply)
	err := c.cc.Invoke(ctx, Douban_GetDouban_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doubanClient) ListDouban(ctx context.Context, in *ListDoubanRequest, opts ...grpc.CallOption) (*ListDoubanReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDoubanReply)
	err := c.cc.Invoke(ctx, Douban_ListDouban_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoubanServer is the server API for Douban service.
// All implementations must embed UnimplementedDoubanServer
// for forward compatibility.
type DoubanServer interface {
	CreateDouban(context.Context, *CreateDoubanRequest) (*CreateDoubanReply, error)
	UpdateDouban(context.Context, *UpdateDoubanRequest) (*UpdateDoubanReply, error)
	DeleteDouban(context.Context, *DeleteDoubanRequest) (*DeleteDoubanReply, error)
	GetDouban(context.Context, *GetDoubanRequest) (*GetDoubanReply, error)
	ListDouban(context.Context, *ListDoubanRequest) (*ListDoubanReply, error)
	mustEmbedUnimplementedDoubanServer()
}

// UnimplementedDoubanServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDoubanServer struct{}

func (UnimplementedDoubanServer) CreateDouban(context.Context, *CreateDoubanRequest) (*CreateDoubanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDouban not implemented")
}
func (UnimplementedDoubanServer) UpdateDouban(context.Context, *UpdateDoubanRequest) (*UpdateDoubanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDouban not implemented")
}
func (UnimplementedDoubanServer) DeleteDouban(context.Context, *DeleteDoubanRequest) (*DeleteDoubanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDouban not implemented")
}
func (UnimplementedDoubanServer) GetDouban(context.Context, *GetDoubanRequest) (*GetDoubanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDouban not implemented")
}
func (UnimplementedDoubanServer) ListDouban(context.Context, *ListDoubanRequest) (*ListDoubanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDouban not implemented")
}
func (UnimplementedDoubanServer) mustEmbedUnimplementedDoubanServer() {}
func (UnimplementedDoubanServer) testEmbeddedByValue()                {}

// UnsafeDoubanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoubanServer will
// result in compilation errors.
type UnsafeDoubanServer interface {
	mustEmbedUnimplementedDoubanServer()
}

func RegisterDoubanServer(s grpc.ServiceRegistrar, srv DoubanServer) {
	// If the following call pancis, it indicates UnimplementedDoubanServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Douban_ServiceDesc, srv)
}

func _Douban_CreateDouban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDoubanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoubanServer).CreateDouban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Douban_CreateDouban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoubanServer).CreateDouban(ctx, req.(*CreateDoubanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Douban_UpdateDouban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoubanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoubanServer).UpdateDouban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Douban_UpdateDouban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoubanServer).UpdateDouban(ctx, req.(*UpdateDoubanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Douban_DeleteDouban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDoubanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoubanServer).DeleteDouban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Douban_DeleteDouban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoubanServer).DeleteDouban(ctx, req.(*DeleteDoubanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Douban_GetDouban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoubanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoubanServer).GetDouban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Douban_GetDouban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoubanServer).GetDouban(ctx, req.(*GetDoubanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Douban_ListDouban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDoubanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoubanServer).ListDouban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Douban_ListDouban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoubanServer).ListDouban(ctx, req.(*ListDoubanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Douban_ServiceDesc is the grpc.ServiceDesc for Douban service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Douban_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.yyets.v1.Douban",
	HandlerType: (*DoubanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDouban",
			Handler:    _Douban_CreateDouban_Handler,
		},
		{
			MethodName: "UpdateDouban",
			Handler:    _Douban_UpdateDouban_Handler,
		},
		{
			MethodName: "DeleteDouban",
			Handler:    _Douban_DeleteDouban_Handler,
		},
		{
			MethodName: "GetDouban",
			Handler:    _Douban_GetDouban_Handler,
		},
		{
			MethodName: "ListDouban",
			Handler:    _Douban_ListDouban_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yyets/v1/douban.proto",
}
