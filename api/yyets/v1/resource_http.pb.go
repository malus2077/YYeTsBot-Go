// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/yyets/v1/resource.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationResourceGetResource = "/api.yyets.v1.Resource/GetResource"
const OperationResourceSearchResource = "/api.yyets.v1.Resource/SearchResource"
const OperationResourceTopResource = "/api.yyets.v1.Resource/TopResource"

type ResourceHTTPServer interface {
	GetResource(context.Context, *GetResourceRequest) (*GetResourceReply, error)
	SearchResource(context.Context, *SearchResourceRequest) (*SearchResourceReply, error)
	TopResource(context.Context, *TopResourceRequest) (*TopResourceReply, error)
}

func RegisterResourceHTTPServer(s *http.Server, srv ResourceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/resource", _Resource_GetResource0_HTTP_Handler(srv))
	r.GET("/api/top", _Resource_TopResource0_HTTP_Handler(srv))
	r.GET("/api/resource/search", _Resource_SearchResource0_HTTP_Handler(srv))
}

func _Resource_GetResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceGetResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetResource(ctx, req.(*GetResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_TopResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TopResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceTopResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TopResource(ctx, req.(*TopResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TopResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_SearchResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceSearchResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchResource(ctx, req.(*SearchResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchResourceReply)
		return ctx.Result(200, reply)
	}
}

type ResourceHTTPClient interface {
	GetResource(ctx context.Context, req *GetResourceRequest, opts ...http.CallOption) (rsp *GetResourceReply, err error)
	SearchResource(ctx context.Context, req *SearchResourceRequest, opts ...http.CallOption) (rsp *SearchResourceReply, err error)
	TopResource(ctx context.Context, req *TopResourceRequest, opts ...http.CallOption) (rsp *TopResourceReply, err error)
}

type ResourceHTTPClientImpl struct {
	cc *http.Client
}

func NewResourceHTTPClient(client *http.Client) ResourceHTTPClient {
	return &ResourceHTTPClientImpl{client}
}

func (c *ResourceHTTPClientImpl) GetResource(ctx context.Context, in *GetResourceRequest, opts ...http.CallOption) (*GetResourceReply, error) {
	var out GetResourceReply
	pattern := "/api/resource"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceGetResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceHTTPClientImpl) SearchResource(ctx context.Context, in *SearchResourceRequest, opts ...http.CallOption) (*SearchResourceReply, error) {
	var out SearchResourceReply
	pattern := "/api/resource/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceSearchResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceHTTPClientImpl) TopResource(ctx context.Context, in *TopResourceRequest, opts ...http.CallOption) (*TopResourceReply, error) {
	var out TopResourceReply
	pattern := "/api/top"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceTopResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
