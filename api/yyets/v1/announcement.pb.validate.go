// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/yyets/v1/announcement.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAnnouncementRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAnnouncementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAnnouncementRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAnnouncementRequestMultiError, or nil if none found.
func (m *CreateAnnouncementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAnnouncementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAnnouncementRequestMultiError(errors)
	}

	return nil
}

// CreateAnnouncementRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAnnouncementRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateAnnouncementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAnnouncementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAnnouncementRequestMultiError) AllErrors() []error { return m }

// CreateAnnouncementRequestValidationError is the validation error returned by
// CreateAnnouncementRequest.Validate if the designated constraints aren't met.
type CreateAnnouncementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAnnouncementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAnnouncementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAnnouncementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAnnouncementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAnnouncementRequestValidationError) ErrorName() string {
	return "CreateAnnouncementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAnnouncementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAnnouncementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAnnouncementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAnnouncementRequestValidationError{}

// Validate checks the field values on CreateAnnouncementReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAnnouncementReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAnnouncementReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAnnouncementReplyMultiError, or nil if none found.
func (m *CreateAnnouncementReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAnnouncementReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAnnouncementReplyMultiError(errors)
	}

	return nil
}

// CreateAnnouncementReplyMultiError is an error wrapping multiple validation
// errors returned by CreateAnnouncementReply.ValidateAll() if the designated
// constraints aren't met.
type CreateAnnouncementReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAnnouncementReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAnnouncementReplyMultiError) AllErrors() []error { return m }

// CreateAnnouncementReplyValidationError is the validation error returned by
// CreateAnnouncementReply.Validate if the designated constraints aren't met.
type CreateAnnouncementReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAnnouncementReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAnnouncementReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAnnouncementReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAnnouncementReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAnnouncementReplyValidationError) ErrorName() string {
	return "CreateAnnouncementReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAnnouncementReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAnnouncementReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAnnouncementReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAnnouncementReplyValidationError{}

// Validate checks the field values on UpdateAnnouncementRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAnnouncementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAnnouncementRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAnnouncementRequestMultiError, or nil if none found.
func (m *UpdateAnnouncementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAnnouncementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAnnouncementRequestMultiError(errors)
	}

	return nil
}

// UpdateAnnouncementRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAnnouncementRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateAnnouncementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAnnouncementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAnnouncementRequestMultiError) AllErrors() []error { return m }

// UpdateAnnouncementRequestValidationError is the validation error returned by
// UpdateAnnouncementRequest.Validate if the designated constraints aren't met.
type UpdateAnnouncementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAnnouncementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAnnouncementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAnnouncementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAnnouncementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAnnouncementRequestValidationError) ErrorName() string {
	return "UpdateAnnouncementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAnnouncementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAnnouncementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAnnouncementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAnnouncementRequestValidationError{}

// Validate checks the field values on UpdateAnnouncementReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAnnouncementReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAnnouncementReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAnnouncementReplyMultiError, or nil if none found.
func (m *UpdateAnnouncementReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAnnouncementReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAnnouncementReplyMultiError(errors)
	}

	return nil
}

// UpdateAnnouncementReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateAnnouncementReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateAnnouncementReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAnnouncementReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAnnouncementReplyMultiError) AllErrors() []error { return m }

// UpdateAnnouncementReplyValidationError is the validation error returned by
// UpdateAnnouncementReply.Validate if the designated constraints aren't met.
type UpdateAnnouncementReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAnnouncementReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAnnouncementReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAnnouncementReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAnnouncementReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAnnouncementReplyValidationError) ErrorName() string {
	return "UpdateAnnouncementReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAnnouncementReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAnnouncementReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAnnouncementReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAnnouncementReplyValidationError{}

// Validate checks the field values on DeleteAnnouncementRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAnnouncementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAnnouncementRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAnnouncementRequestMultiError, or nil if none found.
func (m *DeleteAnnouncementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAnnouncementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAnnouncementRequestMultiError(errors)
	}

	return nil
}

// DeleteAnnouncementRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAnnouncementRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteAnnouncementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAnnouncementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAnnouncementRequestMultiError) AllErrors() []error { return m }

// DeleteAnnouncementRequestValidationError is the validation error returned by
// DeleteAnnouncementRequest.Validate if the designated constraints aren't met.
type DeleteAnnouncementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAnnouncementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAnnouncementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAnnouncementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAnnouncementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAnnouncementRequestValidationError) ErrorName() string {
	return "DeleteAnnouncementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAnnouncementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAnnouncementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAnnouncementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAnnouncementRequestValidationError{}

// Validate checks the field values on DeleteAnnouncementReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAnnouncementReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAnnouncementReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAnnouncementReplyMultiError, or nil if none found.
func (m *DeleteAnnouncementReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAnnouncementReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAnnouncementReplyMultiError(errors)
	}

	return nil
}

// DeleteAnnouncementReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteAnnouncementReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteAnnouncementReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAnnouncementReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAnnouncementReplyMultiError) AllErrors() []error { return m }

// DeleteAnnouncementReplyValidationError is the validation error returned by
// DeleteAnnouncementReply.Validate if the designated constraints aren't met.
type DeleteAnnouncementReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAnnouncementReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAnnouncementReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAnnouncementReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAnnouncementReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAnnouncementReplyValidationError) ErrorName() string {
	return "DeleteAnnouncementReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAnnouncementReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAnnouncementReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAnnouncementReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAnnouncementReplyValidationError{}

// Validate checks the field values on GetAnnouncementRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAnnouncementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAnnouncementRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAnnouncementRequestMultiError, or nil if none found.
func (m *GetAnnouncementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAnnouncementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAnnouncementRequestMultiError(errors)
	}

	return nil
}

// GetAnnouncementRequestMultiError is an error wrapping multiple validation
// errors returned by GetAnnouncementRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAnnouncementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAnnouncementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAnnouncementRequestMultiError) AllErrors() []error { return m }

// GetAnnouncementRequestValidationError is the validation error returned by
// GetAnnouncementRequest.Validate if the designated constraints aren't met.
type GetAnnouncementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnnouncementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnnouncementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnnouncementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnnouncementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnnouncementRequestValidationError) ErrorName() string {
	return "GetAnnouncementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnnouncementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnnouncementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnnouncementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnnouncementRequestValidationError{}

// Validate checks the field values on GetAnnouncementReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAnnouncementReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAnnouncementReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAnnouncementReplyMultiError, or nil if none found.
func (m *GetAnnouncementReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAnnouncementReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAnnouncementReplyMultiError(errors)
	}

	return nil
}

// GetAnnouncementReplyMultiError is an error wrapping multiple validation
// errors returned by GetAnnouncementReply.ValidateAll() if the designated
// constraints aren't met.
type GetAnnouncementReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAnnouncementReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAnnouncementReplyMultiError) AllErrors() []error { return m }

// GetAnnouncementReplyValidationError is the validation error returned by
// GetAnnouncementReply.Validate if the designated constraints aren't met.
type GetAnnouncementReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnnouncementReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnnouncementReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnnouncementReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnnouncementReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnnouncementReplyValidationError) ErrorName() string {
	return "GetAnnouncementReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnnouncementReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnnouncementReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnnouncementReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnnouncementReplyValidationError{}

// Validate checks the field values on ListAnnouncementRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAnnouncementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAnnouncementRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAnnouncementRequestMultiError, or nil if none found.
func (m *ListAnnouncementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAnnouncementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetSize(); val <= 0 || val > 120 {
		err := ListAnnouncementRequestValidationError{
			field:  "Size",
			reason: "value must be inside range (0, 120]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := ListAnnouncementRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAnnouncementRequestMultiError(errors)
	}

	return nil
}

// ListAnnouncementRequestMultiError is an error wrapping multiple validation
// errors returned by ListAnnouncementRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAnnouncementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAnnouncementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAnnouncementRequestMultiError) AllErrors() []error { return m }

// ListAnnouncementRequestValidationError is the validation error returned by
// ListAnnouncementRequest.Validate if the designated constraints aren't met.
type ListAnnouncementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAnnouncementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAnnouncementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAnnouncementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAnnouncementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAnnouncementRequestValidationError) ErrorName() string {
	return "ListAnnouncementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAnnouncementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAnnouncementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAnnouncementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAnnouncementRequestValidationError{}

// Validate checks the field values on ListAnnouncementReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAnnouncementReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAnnouncementReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAnnouncementReplyMultiError, or nil if none found.
func (m *ListAnnouncementReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAnnouncementReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAnnouncementReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAnnouncementReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAnnouncementReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAnnouncementReplyMultiError(errors)
	}

	return nil
}

// ListAnnouncementReplyMultiError is an error wrapping multiple validation
// errors returned by ListAnnouncementReply.ValidateAll() if the designated
// constraints aren't met.
type ListAnnouncementReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAnnouncementReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAnnouncementReplyMultiError) AllErrors() []error { return m }

// ListAnnouncementReplyValidationError is the validation error returned by
// ListAnnouncementReply.Validate if the designated constraints aren't met.
type ListAnnouncementReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAnnouncementReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAnnouncementReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAnnouncementReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAnnouncementReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAnnouncementReplyValidationError) ErrorName() string {
	return "ListAnnouncementReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListAnnouncementReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAnnouncementReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAnnouncementReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAnnouncementReplyValidationError{}

// Validate checks the field values on ListAnnouncementReplyItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAnnouncementReplyItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAnnouncementReplyItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAnnouncementReplyItemMultiError, or nil if none found.
func (m *ListAnnouncementReplyItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAnnouncementReplyItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Browser

	// no validation rules for Content

	// no validation rules for Date

	// no validation rules for Id

	// no validation rules for Username

	if len(errors) > 0 {
		return ListAnnouncementReplyItemMultiError(errors)
	}

	return nil
}

// ListAnnouncementReplyItemMultiError is an error wrapping multiple validation
// errors returned by ListAnnouncementReplyItem.ValidateAll() if the
// designated constraints aren't met.
type ListAnnouncementReplyItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAnnouncementReplyItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAnnouncementReplyItemMultiError) AllErrors() []error { return m }

// ListAnnouncementReplyItemValidationError is the validation error returned by
// ListAnnouncementReplyItem.Validate if the designated constraints aren't met.
type ListAnnouncementReplyItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAnnouncementReplyItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAnnouncementReplyItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAnnouncementReplyItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAnnouncementReplyItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAnnouncementReplyItemValidationError) ErrorName() string {
	return "ListAnnouncementReplyItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListAnnouncementReplyItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAnnouncementReplyItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAnnouncementReplyItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAnnouncementReplyItemValidationError{}
