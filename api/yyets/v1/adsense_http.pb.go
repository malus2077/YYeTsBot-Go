// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: yyets/v1/adsense.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdsenseListAdsense = "/api.yyets.v1.Adsense/ListAdsense"

type AdsenseHTTPServer interface {
	ListAdsense(context.Context, *ListAdsenseRequest) (*ListAdsenseReply, error)
}

func RegisterAdsenseHTTPServer(s *http.Server, srv AdsenseHTTPServer) {
	r := s.Route("/")
	r.GET("/api/adsense", _Adsense_ListAdsense0_HTTP_Handler(srv))
}

func _Adsense_ListAdsense0_HTTP_Handler(srv AdsenseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAdsenseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdsenseListAdsense)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAdsense(ctx, req.(*ListAdsenseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAdsenseReply)
		return ctx.Result(200, reply)
	}
}

type AdsenseHTTPClient interface {
	ListAdsense(ctx context.Context, req *ListAdsenseRequest, opts ...http.CallOption) (rsp *ListAdsenseReply, err error)
}

type AdsenseHTTPClientImpl struct {
	cc *http.Client
}

func NewAdsenseHTTPClient(client *http.Client) AdsenseHTTPClient {
	return &AdsenseHTTPClientImpl{client}
}

func (c *AdsenseHTTPClientImpl) ListAdsense(ctx context.Context, in *ListAdsenseRequest, opts ...http.CallOption) (*ListAdsenseReply, error) {
	var out ListAdsenseReply
	pattern := "/api/adsense"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdsenseListAdsense))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
